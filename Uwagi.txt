
Co spawdzić:
1. FivetranClient
1.1. Fetchers
1.2. Infrastructure
1.2.1. FivetranHttpClient
a. Możliwe iż w tym przypadku niekonieczne, wyciągnięceie wartości za hardkodowanych do zmiennych const, utworzenie wyciągnięcie statycznych wartości 
b. Jeśli domyśla nazwa klienta nie odnosi się do niczego konkretnego, zalecam zmianę na powiazaną z klasą na przykąłd "FivetranHttpClient"
c. Metoda CalculateToekn, prawdopobnie powinna być private.

1.2.2. TtlDictionary
a. Zalecane dodanie do asynchroniczną metodą, do lepszej współpracy z handlerem. 


1.3. Models
k


1.4 HttpRequestHandler
a. Funkcja SemaphoreSlim() w konstruktorze, jako pierwszy argument powinna mieć wartość większą niż 0 lub użyć .Release() przed jakimkolwiek .Wait().
b. Task _GetAsync, dodanie bloku try/finally oraz zastąpienie rekurencji pętlą by uniknąć problemów z ilością wywołań WaitAsync() oraz Release().
c. Możnaby dodać limit ponownych prób/zapytań, w poprzedniej wersji jak i aktualnej, zapytania będą wysyłane aż do otrzymania odpowiedzi.
!!!d. Task GetAsync, użycie właściwości .Result może spowodować zablokowanie wątku, co w połączeniu z metodą _GetAsync, która może się wykonywa w nieskońćzonej pętli spowoduje zablkowanie wątku.


1.5 RestApiManager
Może jest to stylistyczna kwestia ale zmienił bym sposób przypisania wartości w konstruktorze dla "private RestApiManager"

2. Import
- Import/ConnectionSupport/FivetranConnectionSupport.cs
- Import/Helpers/Fivetran/RestApiManagerWrapper.cs
